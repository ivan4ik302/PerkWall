"""
Django settings for perkwall project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from datetime import datetime
from pathlib import Path
import os

from django.urls.base import reverse
from datetime import datetime
from django.core.signing import Signer
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(_n4mni*o3mh#u+amizh_qv_p+m3v^!_otr9q3+=3b-o^!u@b^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'account',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'perkwall.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'perkwall.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'perkwall.validators.UnexpectedCharValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'deploy_static')
STATICFILES_DIRS = [BASE_DIR / 'static']

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

PASSWORD_PLUG = 'drmzqmbB0'

LOGIN_URL = '/account/login'

MAX_USER_SUBSCRIPTIONS = 3

class SelfProductView:
    
    def __init__(self,product):
        self.is_product = True
        self.price = f'{product.price}$' 
        self.name = product.name
        self.title = product.title
        self.change_url = f'{reverse("dashboard-user-product")}?action=change&user_product_id={product.id}'
        self.preview_url = f'{reverse("dashboard-user-preview", kwargs={"kind": "product"})}?user_product_id={product.id}'
        

class SelfSubscriptionProductView:

    def __init__(self,subscription_product):
        self.is_subscription_product = True
        self.subscription_name = 'Free'
        if subscription_product.subscription is not None:
            self.subscription_name = f'{subscription_product.subscription.name} - {subscription_product.subscription.price}$'

        self.name = subscription_product.name
        self.title = subscription_product.title
        self.change_url = f'{reverse("dashboard-user-subscription-product")}?action=change&user_subscription_product_id={subscription_product.id}'
        self.preview_url = reverse("dashboard-user-preview", kwargs={"kind": "subscription-product"}) + f'?user_subscription_product_id={subscription_product.id}'

class SelfSubscriptionView:
    
    def __init__(self,subscription):
        self.is_subscription = True
        self.subscription_name = f'{subscription.name} - {subscription.price}$'
        self.description = subscription.description
        self.change_url = f'{reverse("dashboard-user-subscription")}?action=change&user_subscription_id={subscription.id}'

class SelfIteamListView:

    def __init__(self, products = None, subscription_products = None, subscriptions = None, short = False):
        self.is_products = False
        self.is_subscription_products = False
        self.is_subscriptions = False
        self.__object_list = []
        if products is not None and subscription_products is None and subscriptions is None:
            self.is_products = True
            self.elements_number = len(products)
            if short and self.elements_number > 3:
                for product in products[:3]:
                    self.__object_list.append(SelfProductView(product))

            else:
                for product in products:
                    self.__object_list.append(SelfProductView(product))

        elif subscription_products is not None and products is None and subscriptions is None:
            self.is_subscription_products = True
            self.elements_number = len(subscription_products)
            if short and self.elements_number > 3:
                for subscription_product in subscription_products[:3]:
                    self.__object_list.append(SelfSubscriptionProductView(subscription_product))

            else:
                for subscription_product in subscription_products:
                    self.__object_list.append(SelfSubscriptionProductView(subscription_product))

        elif subscriptions is not None and subscription_products is None and products is None:
            self.is_subscriptions = True
            self.elements_number = len(subscriptions)
            if short and self.elements_number > 3:
                for subscription in subscriptions[:3]:
                    self.__object_list.append(SelfSubscriptionView(subscription))

            else:
                for subscription in subscriptions:
                    self.__object_list.append(SelfSubscriptionView(subscription))

        else:
            raise Exception()

    def __getitem__(self, index):
        return self.__object_list[index]

    def __len__(self):
         return len(self.__object_list)

class ForeignProductView:
    
    def __init__(self,product, is_bought):
        self.is_product = True
        self.price = f'{product.price}$' 
        self.name = product.name
        self.title = product.title
        self.user = product.user.username
        self.is_bought = is_bought
        if is_bought:
            self.view_url = reverse('wall-view', kwargs={'kind': 'product'}) + f'?product_id={product.id}'
        else:
            signer = Signer()
            self.buy_url= f'{reverse("payment-main")}?token={signer.sign_object({"type": "product", "id": product.id})}'

class ForeignSubscriptionProductView:
    
    def __init__(self,subscription_product, is_bought):
        self.is_subscription_product = True
        self.subscription_name = 'Free'
        if subscription_product.subscription is not None:
            self.subscription_name = f'{subscription_product.subscription.name} - {subscription_product.subscription.price}$'

        self.name = subscription_product.name
        self.title = subscription_product.title
        self.user = subscription_product.user.username
        self.is_bought = is_bought
        if is_bought:
            self.view_url = reverse('wall-view', kwargs={'kind': 'subscription-product'}) + f'?subscription_product_id={subscription_product.id}'

        else:
            signer = Signer()
            self.buy_sub_url = f'{reverse("payment-main")}?token={signer.sign_object({"type": "subscription", "id": subscription_product.subscription.id})}'

class ForeignSubscriptionView:
    
    def __init__(self,subscription, is_bought, expires):
        self.is_subscription = True
        self.price = f'{subscription.price}$' 
        self.name = subscription.name
        self.description = subscription.description
        self.user = subscription.user.username
        self.is_bought = is_bought
        if is_bought:
            self.expires = expires

        else:
            signer = Signer()
            self.buy_url= f'{reverse("payment-main")}?token={signer.sign_object({"type": "subscription", "id": subscription.id})}'


class ForeignIteamListView:

    def __init__(self, products = None, subscription_products = None, subscriptions = None, bill_products = None, bill_subscriptions = None, short = False):
        self.is_products = False
        self.is_subscription_products = False
        self.is_subscriptions = False
        self.__object_list = []

        if products is not None and bill_products is not None and subscription_products is None and subscriptions is None and bill_subscriptions is None:
            self.is_products = True
            self.elements_number = len(products)
            if short and self.elements_number > 3:
                for product in products[:3]:
                    is_bought = False
                    for bill_product in bill_products:
                        if bill_product.product == product:
                            is_bought = True

                    self.__object_list.append(ForeignProductView(product, is_bought))

            else:
                for product in products:
                    is_bought = False
                    for bill_product in bill_products:
                        if bill_product.product == product:
                            is_bought = True

                    self.__object_list.append(ForeignProductView(product, is_bought))

        elif subscription_products is not None and bill_subscriptions is not None and products is None and bill_products is None and subscriptions is None:
            self.is_subscription_products = True
            self.elements_number = len(subscription_products)
            if short and self.elements_number > 3:
                for subscription_product in subscription_products[:3]:
                    is_bought = False
                    if subscription_product.subscription is not None:
                        for bill_subscription in bill_subscriptions:
                            if bill_subscription.subscription == subscription_product.subscription and bill_subscription.expires > datetime.utcnow():
                                is_bought = True

                    else:
                        is_bought = True

                    self.__object_list.append(ForeignSubscriptionProductView(subscription_product, is_bought))
            else:
                for subscription_product in subscription_products:
                    is_bought = False
                    if subscription_product.subscription is not None:
                        for bill_subscription in bill_subscriptions:
                            if bill_subscription.subscription == subscription_product.subscription and bill_subscription.expires > datetime.utcnow():
                                is_bought = True

                    else:
                        is_bought = True

                    self.__object_list.append(ForeignSubscriptionProductView(subscription_product, is_bought))

        elif subscriptions is not None and bill_subscriptions is not None and products is None and bill_products is None and subscription_products is None:
            self.is_subscriptions = False
            self.elements_number = len(subscriptions)
            if short and self.elements_number > 3:
                for subscription in subscriptions[:3]:
                    is_bought = False
                    expires = None
                    for bill_subscription in bill_subscriptions:
                        if bill_subscription.subscription == subscription and bill_subscription.expires > datetime.utcnow():
                                is_bought = True
                                expires = bill_subscription.expires
                    
                    self.__object_list.append(ForeignSubscriptionView(subscription, is_bought, expires))

            else:
                for subscription in subscriptions:
                    is_bought = False
                    expires = None
                    for bill_subscription in bill_subscriptions:
                        if bill_subscription.subscription == subscription and bill_subscription.expires > datetime.utcnow():
                                is_bought = True
                                expires = bill_subscription.expires

                    self.__object_list.append(ForeignSubscriptionView(subscription, is_bought, expires))

        elif bill_products is not None and subscription_products is None and subscriptions is None and bill_subscriptions is None and products is None:
            self.is_products = True
            self.elements_number = len(bill_products)
            if short and self.elements_number > 3:
                for bill_product in bill_products[:3]:
                    self.__object_list.append(ForeignProductView(bill_product.product, True))

            else:
                for bill_product in bill_products:
                    self.__object_list.append(ForeignProductView(bill_product.product, True))

        elif bill_subscriptions is not None and products is None and bill_products is None and subscription_products is None and subscriptions is None:
            self.is_subscriptions = False
            self.elements_number = len(bill_subscriptions)
            if short and self.elements_number > 3:
                for bill_subscription in bill_subscriptions[:3]:
                    if bill_subscription.expires > datetime.utcnow():
                        expires = bill_subscription.expires
                        self.__object_list.append(ForeignSubscriptionView(bill_subscription.subscription, True, expires))

            else:
                for bill_subscription in bill_subscriptions:
                    if bill_subscription.expires > datetime.utcnow():
                        expires = bill_subscription.expires
                        self.__object_list.append(ForeignSubscriptionView(bill_subscription.subscription, True, expires))

        else:
            raise Exception()

    def __getitem__(self, index):
        return self.__object_list[index]

    def __len__(self):
         return len(self.__object_list)